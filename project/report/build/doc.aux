\relax 
\providecommand\babel@aux[2]{}
\@nameuse{bbl@beforestart}
\catcode `"\active 
\@writefile{toc}{\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax }
\@writefile{lof}{\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax }
\@writefile{lot}{\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax }
\abx@aux@refcontext{none/global//global/global}
\babel@aux{english}{}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {1}PRNG and Random Variables}{1}{}\protected@file@percent }
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Create a function that implements a linear congruential generator (LCG), accepting as input the parameters: seed, m, a,and c.}{1}{}\protected@file@percent }
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces LCG Class}}{1}{}\protected@file@percent }
\newlabel{fig:lcgimpl}{{1}{1}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}Generate 1000 values uniformly distributed in the range [0,1] using your PRNG. For this case use m=100, a=13 c=1and seed =1;}{1}{}\protected@file@percent }
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Code used to write 1000 uniformly generated values from each generator to disk}}{2}{}\protected@file@percent }
\newlabel{fig:uniformcode}{{2}{2}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}Compare the distribution of your values with the distribution of values generated using the \\ \lstinline {UniformRandomVariable()} of ns-3.}{2}{}\protected@file@percent }
\abx@aux@cite{artofprogramming}
\abx@aux@segm{0}{0}{artofprogramming}
\abx@aux@cite{mersenne}
\abx@aux@segm{0}{0}{mersenne}
\abx@aux@cite{ns3-random}
\abx@aux@segm{0}{0}{ns3-random}
\abx@aux@cite{random-pierre}
\abx@aux@segm{0}{0}{random-pierre}
\abx@aux@cite{ns3-random}
\abx@aux@segm{0}{0}{ns3-random}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces The corresponding plots gathered from the data above}}{3}{}\protected@file@percent }
\newlabel{uniform_plots}{{3}{3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.4}Comment on the difference in the results and propose values of m, a, and c which gives you better results.}{3}{}\protected@file@percent }
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Our improved generator compared to the Ns3 generator}}{4}{}\protected@file@percent }
\newlabel{improved_uniform_plots}{{4}{4}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.5}What PRNG does ns-3 use? What method does ns-3 use to generate a normal random variable?}{4}{}\protected@file@percent }
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.6}Using the \lstinline {time} system command of Linux compare the execution time for the generation of the uniform distribution using your function and ns-3 function}{4}{}\protected@file@percent }
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces The results from timing a program that generated 1000 random numbers using \lstinline {time}}}{5}{}\protected@file@percent }
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.7}Write a second function that generates an exponential distribution with mean $\beta >0$ from a uniform distribution generated using the LCG; Choose one of the methods for generating RV covered in the course and motivate your choice with respect to the specific task.}{5}{}\protected@file@percent }
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Resulting code after implementing the Inverse Function Transform}}{6}{}\protected@file@percent }
\newlabel{fig:invfunctrans}{{6}{6}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {1.8}Compare your exponential distribution with ns-3 \lstinline {ExponentialRandomVariable()} and the theoretical expression of the probability density function.}{6}{}\protected@file@percent }
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Our exponentially distributed generator compared to the Ns3 counterpart}}{6}{}\protected@file@percent }
\newlabel{exp_plots}{{7}{6}}
\abx@aux@read@bbl@mdfivesum{69B925F14EE25E300CEE4ADED99CE926}
\abx@aux@refcontextdefaultsdone
\abx@aux@defaultrefcontext{0}{artofprogramming}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{mersenne}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{ns3-random}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{random-pierre}{none/global//global/global}
\gdef \@abspage@last{8}
